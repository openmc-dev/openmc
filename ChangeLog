2011-02-22 Paul Romano <romano7@mit.edu>

	* ace.f90: Added read_angular_dist and read_energy_dist
	subroutines that read the energy and angle distributions for
	secondary neutrons for reactions with MT < 100. Note that these
	routines don't actually parse the distributions since their form
	will depend on the secondary law is for that particle reaction.
	* global.f90: Incremented minor version
	* types.f90: Put angular and energy distribution information
	within AceReaction since it is unique to each reaction

2011-02-13 Paul Romano <romano7@mit.edu>

	* ace.f90: Fixed xs_continuous allocation again -- cross sections
	were not being assigned correctly to materials. Added elastic
	scattering in list of reactions. Changed name of rxn %
	energy_index to IE.
	* endf.f90: New module. Includes subroutine reaction_name which
	returns the name of a reaction for a given ENDF MT value.
	* geometry.f90: Fixed bug in dist_to_boundary (the 'w' in uvw was
	actually being set to 'z', not 'w'). Changed 0's and 1's to ZEROs
	and ONEs.
	* global.f90: Added ZERO and ONE.
	* physics.f90: Can now sample reactions once nuclide is
	selected. Added subroutines elastic_scatter, level_inelastic, and
	n_gamma (level_inelastic is just a stub), and significantly
	changed elastic scattering (currently based on stationary target).
	* types.f90: Added n_reaction attribute on AceContinuous, changed
	AceReaction % energy_index to IE.

2011-02-09 Paul Romano <romano7@mit.edu>

	* ace.f90: Fixed bug in the way xs_continuous was allocated. If,
	e.g., 92235.03c was listed twice in a file, two spots would be
	allocated in the array instead of one.
	* cross_section.f90: Added calculation of total material
	cross-section.
	* data_structures.f90: Added list routines for each different
	type (integer, real, key/value pairs) and an interface for
	them. Dictionaries can now take character keys or integer
	keys. New hash function for integers is simple mod function.
	* energy_grid.f90: Removed grid_count since we now have a generic
	list_size routine in data_structures. Added original_indices
	routine in order to do SERPENT-style double-indexing.
	* fileio.f90: Fixed normalize_ao routine to include calculations
	based on atom or gram density (this should probably be moved to
	different module). Added get_next_line routine that reads a full
	line of input including any continuation lines marked by an
	ampersand.
	* global.f90: Added separate dictionary types (CI and II), added
	pointers for current cell, surface, and material. Added e_grid and
	n_grid
	* physics.f90: Neutron energy sampled at beginning of
	transport. Added watt_spectrum and maxwell_spectrum
	routines. Changed collision routine so that actual nuclide is
	sampled.
	* search.f90: Fixed binary_search routine
	* string.f90: Changed concatenate subroutine into a function
	* types.f90: Moved List and Dictionary types from data_structures
	to here (including new types). LinkedListGrid is now ListReal.

2011-02-03 Paul Romano <romano7@mit.edu>

	* ace.f90: Added initial routines for reading continuous-energy
	ACE cross section tables. No secondary energy/angle distributions
	or nu data is read.
	* cross_section.f90: Added read_xsdata routine which reads
	information from an xsdata file from SERPENT.
	* data_structures.f90: Moved derived types to the types module and
	change dict_create so that one doesn't need to add a (key,value)
	pair on initialization.
	* energy_grid.f90: First routines for energy grid unionization
	based on insertion sorts.
	* fileio.f90: Added routines for reading integer and real data,
	particularly from cross-section libraries. Made an interface so
	that a single routine can be called regardless of type. Ability to
	read material cards and added subroutine for normalization of
	atom/weight percents.
	* Makefile: Added 'unittest' target
	* output.f90: Fixed bug in get_today subroutine whereby the day
	was displayed wrong.
	* search.f90: Added binary search which will eventually be used
	for energy grid searches
	* unittest.f90: Added this program for unit testing.

2011-01-26 Paul Romano <romano7@mit.edu>

	* physics.f90: Added collision routine, still segfaults though.
	* geometry.f90: Added messages for high verbosities
	* global.f90: Added verbosity parameter, key length for
	dictionaries
	* output.f90: Implemented verbosity for messages.
	* data_structures.f90: Added implementations of linked list and
	dictionaries based on the flib open source package

2011-01-23 Paul Romano <romano7@mit.edu>

	* types.f90: Added cell, surface, and alive attributes to Neutron
	* fileio.f90: External source no longer array
	* geometry.f90: Changed cell_contains slightly so that it can
	evaluate simple cell logical expressions. Added find_cell and
	cross_boundary subroutines. Changed dist_to_boundary to also give
	back closest surface
	* global.f90: Added set_defaults subroutine
	* source.f90: Isotropic angle is now sampled in init_source, fixed
	sampling in box, checks for external source type. Added
	get_source_particle function.

2011-01-22 Paul Romano <romano7@mit.edu>

	* input_sample: Added a sample input file
	* main.f90: Added run_problem subroutine
	* mcnp_random.f90: Added random number generator based on MCNP's
	linear congruential generator
	* fileio.f90: Completely changed how cells, surfaces, and
	materials are allocated. Now there is a first pass through the
	input file made by read_count which allows the arrays to be
	pre-allocated, then read_input actually parses the input data.
	* geometry.f90: Only formatting changes
	* output.f90: Added the echo_input subroutine, made formatting
	changes
	* string.f90: Moved int_to_str to the global module, changed
	string splitting to recognize tab characters
	* types.f90: Deleted List types, added Isotope, Material, and
	Source
	* source.f90: Added init_source routine which initializes source
	particles
