import openmc
import numpy as np

# Create a dictionary with the cross section data
mgxs_data = {}

# Instantiate the energy group data
mgxs_data["group_edges"] = [0.0, 0.13, 0.63, 4.1, 55.6, 9.2e3, 1.36e6, 1.0e7]
mgxs_data["num_delayed_groups"] = 8

# UO2
transport = np.array(
    [
        1.77949e-01,
        3.29805e-01,
        4.80388e-01,
        5.54367e-01,
        3.11801e-01,
        3.95168e-01,
        5.64406e-01,
    ]
)
absorption = np.array(
    [
        8.02480e-03,
        3.71740e-03,
        2.67690e-02,
        9.62360e-02,
        3.00200e-02,
        1.11260e-01,
        2.82780e-01,
    ]
)
capture = np.array(
    [
        8.12740e-04,
        2.89810e-03,
        2.03158e-02,
        7.76712e-02,
        1.22116e-02,
        2.82252e-02,
        6.67760e-02,
    ]
)
velocity = np.array(
    [2.23466e09, 5.07347e08, 3.86595e07, 5.13931e06, 1.67734e06, 7.28603e05, 2.92902e05]
)
fission = np.array(
    [
        7.21206e-03,
        8.19301e-04,
        6.45320e-03,
        1.85648e-02,
        1.78084e-02,
        8.30348e-02,
        2.16004e-01,
    ]
)
nu = np.array(
    [2.78145e00, 2.47443e00, 2.43383e00, 2.43380e00, 2.43380e00, 2.43380e00, 2.43380e00]
)
nu_fission = nu * fission
chi = np.array(
    [
        5.87910e-01,
        4.11760e-01,
        3.39060e-04,
        1.17610e-07,
        0.00000e00,
        0.00000e00,
        0.00000e00,
    ]
)
beta = np.array(
    [
        2.13333e-04,
        1.04514e-03,
        6.03969e-04,
        1.33963e-03,
        2.29386e-03,
        7.05174e-04,
        6.00381e-04,
        2.07736e-04,
    ]
)
decay_constant = np.array(
    [
        1.247e-02,
        2.829e-02,
        4.252e-02,
        1.330e-01,
        2.925e-01,
        6.665e-01,
        1.635e00,
        3.555e00,
    ]
)
chi_delayed = np.array(
    [
        [0.00075, 0.98512, 0.01413, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.03049, 0.96907, 0.00044, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.00457, 0.97401, 0.02142, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.02002, 0.97271, 0.00727, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.05601, 0.93818, 0.00581, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.06098, 0.93444, 0.00458, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.10635, 0.88298, 0.01067, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.09346, 0.90260, 0.00394, 0.00000, 0.00000, 0.00000, 0.00000],
    ]
)
scatter = np.array(
    [
        [
            [
                1.27537e-01,
                4.23780e-02,
                9.43740e-06,
                5.51630e-09,
                0.00000e00,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                3.24456e-01,
                1.63140e-03,
                3.14270e-09,
                0.00000e00,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                0.00000e00,
                4.50940e-01,
                2.67920e-03,
                0.00000e00,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                4.52565e-01,
                5.56640e-03,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                1.25250e-04,
                2.71401e-01,
                1.02550e-02,
                1.00210e-08,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                1.29680e-03,
                2.65802e-01,
                1.68090e-02,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                8.54580e-03,
                2.73080e-01,
            ],
        ]
    ]
)

mgxs_data["UO2"] = {}
mgxs_data["UO2"]["order"] = 0
mgxs_data["UO2"]["transport"] = transport
mgxs_data["UO2"]["absorption"] = absorption
mgxs_data["UO2"]["capture"] = capture
mgxs_data["UO2"]["inverse-velocity"] = 1.0 / velocity
mgxs_data["UO2"]["scatter-matrix"] = scatter
mgxs_data["UO2"]["fission"] = fission
mgxs_data["UO2"]["nu-fission"] = nu_fission
mgxs_data["UO2"]["chi"] = chi
mgxs_data["UO2"]["beta"] = beta
mgxs_data["UO2"]["decay-rate"] = decay_constant
mgxs_data["UO2"]["chi-delayed"] = chi_delayed

# MOX 4.3%
transport = np.array(
    [
        1.78731e-01,
        3.30849e-01,
        4.83772e-01,
        5.66922e-01,
        4.26227e-01,
        6.78997e-01,
        6.82852e-01,
    ]
)
absorption = np.array(
    [
        8.43390e-03,
        3.75770e-03,
        2.79700e-02,
        1.04210e-01,
        1.39940e-01,
        4.09180e-01,
        4.09350e-01,
    ]
)
capture = np.array(
    [
        8.06860e-04,
        2.88080e-03,
        2.22717e-02,
        8.13228e-02,
        1.29177e-01,
        1.76423e-01,
        1.60382e-01,
    ]
)
velocity = np.array(
    [2.23473e09, 5.07114e08, 3.88385e07, 5.16295e06, 1.75719e06, 7.68973e05, 2.94764e05]
)
fission = np.array(
    [
        7.62704e-03,
        8.76898e-04,
        5.69835e-03,
        2.28872e-02,
        1.07635e-02,
        2.32757e-01,
        2.48968e-01,
    ]
)
nu = np.array(
    [2.85209e00, 2.89099e00, 2.85486e00, 2.86073e00, 2.85447e00, 2.86415e00, 2.86780e00]
)
nu_fission = nu * fission
chi = np.array(
    [
        5.87910e-01,
        4.11760e-01,
        3.39060e-04,
        1.17610e-07,
        0.00000e00,
        0.00000e00,
        0.00000e00,
    ]
)
beta = np.array(
    [
        7.82484e-05,
        6.40534e-04,
        2.27884e-04,
        5.78624e-04,
        9.97539e-04,
        4.33265e-04,
        3.22355e-04,
        1.23882e-04,
    ]
)
decay_constant = np.array(
    [
        1.247e-02,
        2.829e-02,
        4.252e-02,
        1.330e-01,
        2.925e-01,
        6.665e-01,
        1.635e00,
        3.555e00,
    ]
)
chi_delayed = np.array(
    [
        [0.00075, 0.98512, 0.01413, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.03069, 0.96887, 0.00044, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.00607, 0.97276, 0.02117, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.01887, 0.97282, 0.00831, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.04990, 0.94419, 0.00591, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.05524, 0.93984, 0.00492, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.10140, 0.88508, 0.01351, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.08055, 0.91408, 0.00537, 0.00000, 0.00000, 0.00000, 0.00000],
    ]
)
scatter = np.array(
    [
        [
            [
                1.28876e-01,
                4.14130e-02,
                8.22900e-06,
                5.04050e-09,
                0.00000e00,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                3.25452e-01,
                1.63950e-03,
                1.59820e-09,
                0.00000e00,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                0.00000e00,
                4.53188e-01,
                2.61420e-03,
                0.00000e00,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                4.57173e-01,
                5.53940e-03,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                1.60460e-04,
                2.76814e-01,
                9.31270e-03,
                9.16560e-09,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                2.00510e-03,
                2.52962e-01,
                1.48500e-02,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                8.49480e-03,
                2.65007e-01,
            ],
        ]
    ]
)

mgxs_data["MOX 4.3%"] = {}
mgxs_data["MOX 4.3%"]["order"] = 0
mgxs_data["MOX 4.3%"]["transport"] = transport
mgxs_data["MOX 4.3%"]["absorption"] = absorption
mgxs_data["MOX 4.3%"]["capture"] = capture
mgxs_data["MOX 4.3%"]["inverse-velocity"] = 1.0 / velocity
mgxs_data["MOX 4.3%"]["scatter-matrix"] = scatter
mgxs_data["MOX 4.3%"]["fission"] = fission
mgxs_data["MOX 4.3%"]["nu-fission"] = nu_fission
mgxs_data["MOX 4.3%"]["chi"] = chi
mgxs_data["MOX 4.3%"]["beta"] = beta
mgxs_data["MOX 4.3%"]["decay-rate"] = decay_constant
mgxs_data["MOX 4.3%"]["chi-delayed"] = chi_delayed

# MOX 7.0%
transport = np.array(
    [
        1.81323e-01,
        3.34368e-01,
        4.93785e-01,
        5.91216e-01,
        4.74198e-01,
        8.33601e-01,
        8.53603e-01,
    ]
)
absorption = np.array(
    [
        9.06570e-03,
        4.29670e-03,
        3.28810e-02,
        1.22030e-01,
        1.82980e-01,
        5.68460e-01,
        5.85210e-01,
    ]
)
capture = np.array(
    [
        8.11240e-04,
        2.97105e-03,
        2.44594e-02,
        8.91570e-02,
        1.67016e-01,
        2.44666e-01,
        2.22407e-01,
    ]
)
velocity = np.array(
    [2.23479e09, 5.07355e08, 3.91436e07, 5.18647e06, 1.78072e06, 7.84470e05, 3.02310e05]
)
fission = np.array(
    [
        8.25446e-03,
        1.32565e-03,
        8.42156e-03,
        3.28730e-02,
        1.59636e-02,
        3.23794e-01,
        3.62803e-01,
    ]
)
nu = np.array(
    [2.88498e00, 2.91079e00, 2.86574e00, 2.87063e00, 2.86714e00, 2.86658e00, 2.87539e00]
)
nu_fission = nu * fission
chi = np.array(
    [
        5.87910e-01,
        4.11760e-01,
        3.39060e-04,
        1.17610e-07,
        0.00000e00,
        0.00000e00,
        0.00000e00,
    ]
)
beta = np.array(
    [
        7.65120e-05,
        6.34833e-04,
        2.23483e-04,
        5.68882e-04,
        9.81163e-04,
        4.29227e-04,
        3.18971e-04,
        1.21830e-04,
    ]
)
decay_constant = np.array(
    [
        1.247e-02,
        2.829e-02,
        4.252e-02,
        1.330e-01,
        2.925e-01,
        6.665e-01,
        1.635e00,
        3.555e00,
    ]
)
chi_delayed = np.array(
    [
        [0.00075, 0.98512, 0.01413, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.03069, 0.96887, 0.00044, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.00612, 0.97272, 0.02116, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.01883, 0.97283, 0.00834, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.04968, 0.94440, 0.00592, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.05506, 0.94002, 0.00492, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.10115, 0.88527, 0.01358, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.08021, 0.91438, 0.00541, 0.00000, 0.00000, 0.00000, 0.00000],
    ]
)
scatter = np.array(
    [
        [
            [
                1.30457e-01,
                4.17920e-02,
                8.51050e-06,
                5.13290e-09,
                0.00000e00,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                3.28428e-01,
                1.64360e-03,
                2.20170e-09,
                0.00000e00,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                0.00000e00,
                4.58371e-01,
                2.53310e-03,
                0.00000e00,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                4.63709e-01,
                5.47660e-03,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                1.76190e-04,
                2.82313e-01,
                8.72890e-03,
                9.00160e-09,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                2.27600e-03,
                2.49751e-01,
                1.31140e-02,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                8.86450e-03,
                2.59529e-01,
            ],
        ]
    ]
)

mgxs_data["MOX 7.0%"] = {}
mgxs_data["MOX 7.0%"]["order"] = 0
mgxs_data["MOX 7.0%"]["transport"] = transport
mgxs_data["MOX 7.0%"]["absorption"] = absorption
mgxs_data["MOX 7.0%"]["capture"] = capture
mgxs_data["MOX 7.0%"]["inverse-velocity"] = 1.0 / velocity
mgxs_data["MOX 7.0%"]["scatter-matrix"] = scatter
mgxs_data["MOX 7.0%"]["fission"] = fission
mgxs_data["MOX 7.0%"]["nu-fission"] = nu_fission
mgxs_data["MOX 7.0%"]["chi"] = chi
mgxs_data["MOX 7.0%"]["beta"] = beta
mgxs_data["MOX 7.0%"]["decay-rate"] = decay_constant
mgxs_data["MOX 7.0%"]["chi-delayed"] = chi_delayed

# MOX 8.7%
transport = np.array(
    [
        1.83045e-01,
        3.36705e-01,
        5.00507e-01,
        6.06174e-01,
        5.02754e-01,
        9.21028e-01,
        9.55231e-01,
    ]
)
absorption = np.array(
    [
        9.48620e-03,
        4.65560e-03,
        3.62400e-02,
        1.32720e-01,
        2.08400e-01,
        6.58700e-01,
        6.90170e-01,
    ]
)
capture = np.array(
    [
        8.14110e-04,
        3.03134e-03,
        2.59684e-02,
        9.36753e-02,
        1.89142e-01,
        2.83812e-01,
        2.59571e-01,
    ]
)
velocity = np.array(
    [2.23483e09, 5.07520e08, 3.93259e07, 5.20109e06, 1.79321e06, 7.91377e05, 3.05435e05]
)
fission = np.array(
    [
        8.67209e-03,
        1.62426e-03,
        1.02716e-02,
        3.90447e-02,
        1.92576e-02,
        3.74888e-01,
        4.30599e-01,
    ]
)
nu = np.array(
    [2.90426e00, 2.91795e00, 2.86986e00, 2.87491e00, 2.87175e00, 2.86752e00, 2.87808e00]
)
nu_fission = nu * fission
chi = np.array(
    [
        5.87910e-01,
        4.11760e-01,
        3.39060e-04,
        1.17610e-07,
        0.00000e00,
        0.00000e00,
        0.00000e00,
    ]
)
beta = np.array(
    [
        7.58799e-05,
        6.33750e-04,
        2.22271e-04,
        5.66810e-04,
        9.77854e-04,
        4.29965e-04,
        3.19265e-04,
        1.21188e-04,
    ]
)
decay_constant = np.array(
    [
        1.247e-02,
        2.829e-02,
        4.252e-02,
        1.330e-01,
        2.925e-01,
        6.665e-01,
        1.635e00,
        3.555e00,
    ]
)
chi_delayed = np.array(
    [
        [0.00075, 0.98512, 0.01413, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.03069, 0.96887, 0.00044, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.00614, 0.97270, 0.02116, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.01880, 0.97284, 0.00836, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.04960, 0.94448, 0.00592, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.05496, 0.94012, 0.00492, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.10101, 0.88540, 0.01359, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.08003, 0.91454, 0.00543, 0.00000, 0.00000, 0.00000, 0.00000],
    ]
)
scatter = np.array(
    [
        [
            [
                1.31504e-01,
                4.20460e-02,
                8.69720e-06,
                5.19380e-09,
                0.00000e00,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                3.30403e-01,
                1.64630e-03,
                2.60060e-09,
                0.00000e00,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                0.00000e00,
                4.61792e-01,
                2.47490e-03,
                0.00000e00,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                4.68021e-01,
                5.43300e-03,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                1.85970e-04,
                2.85771e-01,
                8.39730e-03,
                8.92800e-09,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                2.39160e-03,
                2.47614e-01,
                1.23220e-02,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                8.96810e-03,
                2.56093e-01,
            ],
        ]
    ]
)

mgxs_data["MOX 8.7%"] = {}
mgxs_data["MOX 8.7%"]["order"] = 0
mgxs_data["MOX 8.7%"]["transport"] = transport
mgxs_data["MOX 8.7%"]["absorption"] = absorption
mgxs_data["MOX 8.7%"]["capture"] = capture
mgxs_data["MOX 8.7%"]["inverse-velocity"] = 1.0 / velocity
mgxs_data["MOX 8.7%"]["scatter-matrix"] = scatter
mgxs_data["MOX 8.7%"]["fission"] = fission
mgxs_data["MOX 8.7%"]["nu-fission"] = nu_fission
mgxs_data["MOX 8.7%"]["chi"] = chi
mgxs_data["MOX 8.7%"]["beta"] = beta
mgxs_data["MOX 8.7%"]["decay-rate"] = decay_constant
mgxs_data["MOX 8.7%"]["chi-delayed"] = chi_delayed

# Fission Chamber
transport = np.array(
    [
        1.26032e-01,
        2.93160e-01,
        2.84250e-01,
        2.81020e-01,
        3.34460e-01,
        5.65640e-01,
        1.17214e00,
    ]
)
absorption = np.array(
    [
        5.11320e-04,
        7.58130e-05,
        3.16430e-04,
        1.16750e-03,
        3.39770e-03,
        9.18860e-03,
        2.32440e-02,
    ]
)
capture = np.array(
    [
        5.11315e-04,
        7.58072e-05,
        3.15966e-04,
        1.16226e-03,
        3.39755e-03,
        9.18789e-03,
        2.32419e-02,
    ]
)
velocity = np.array(
    [2.24885e09, 5.12300e08, 3.75477e07, 5.02783e06, 1.66563e06, 6.70396e05, 2.51392e05]
)
fission = np.array(
    [
        4.79002e-09,
        5.82564e-09,
        4.63719e-07,
        5.24406e-06,
        1.45390e-07,
        7.14972e-07,
        2.08041e-06,
    ]
)
nu = np.array(
    [2.76283e00, 2.46239e00, 2.43383e00, 2.43380e00, 2.43380e00, 2.43380e00, 2.43380e00]
)
nu_fission = nu * fission
chi = np.array(
    [
        5.87910e-01,
        4.11760e-01,
        3.39060e-04,
        1.17610e-07,
        0.00000e00,
        0.00000e00,
        0.00000e00,
    ]
)
beta = np.array(
    [
        2.13333e-04,
        1.04514e-03,
        6.03969e-04,
        1.33963e-03,
        2.29386e-03,
        7.05174e-04,
        6.00381e-04,
        2.07736e-04,
    ]
)
decay_constant = np.array(
    [
        1.247e-02,
        2.829e-02,
        4.252e-02,
        1.330e-01,
        2.925e-01,
        6.665e-01,
        1.635e00,
        3.555e00,
    ]
)
chi_delayed = np.array(
    [
        [0.00075, 0.98512, 0.01413, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.03049, 0.96907, 0.00044, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.00457, 0.97401, 0.02142, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.02002, 0.97271, 0.00727, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.05601, 0.93818, 0.00581, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.06098, 0.93444, 0.00458, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.10635, 0.88298, 0.01067, 0.00000, 0.00000, 0.00000, 0.00000],
        [0.09346, 0.90260, 0.00394, 0.00000, 0.00000, 0.00000, 0.00000],
    ]
)
scatter = np.array(
    [
        [
            [
                6.61659e-02,
                5.90700e-02,
                2.83340e-04,
                1.46220e-06,
                2.06420e-08,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                2.40377e-01,
                5.24350e-02,
                2.49900e-04,
                1.92390e-05,
                2.98750e-06,
                4.21400e-07,
            ],
            [
                0.00000e00,
                0.00000e00,
                1.83425e-01,
                9.22880e-02,
                6.93650e-03,
                1.07900e-03,
                2.05430e-04,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                7.90769e-02,
                1.69990e-01,
                2.58600e-02,
                4.92560e-03,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                3.73400e-05,
                9.97570e-02,
                2.06790e-01,
                2.44780e-02,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                9.17420e-04,
                3.16774e-01,
                2.38760e-01,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                4.97930e-02,
                1.09910e00,
            ],
        ]
    ]
)

mgxs_data["Fission Chamber"] = {}
mgxs_data["Fission Chamber"]["order"] = 0
mgxs_data["Fission Chamber"]["transport"] = transport
mgxs_data["Fission Chamber"]["absorption"] = absorption
mgxs_data["Fission Chamber"]["capture"] = capture
mgxs_data["Fission Chamber"]["inverse-velocity"] = 1.0 / velocity
mgxs_data["Fission Chamber"]["scatter-matrix"] = scatter
mgxs_data["Fission Chamber"]["fission"] = fission
mgxs_data["Fission Chamber"]["nu-fission"] = nu_fission
mgxs_data["Fission Chamber"]["chi"] = chi
mgxs_data["Fission Chamber"]["beta"] = beta
mgxs_data["Fission Chamber"]["decay-rate"] = decay_constant
mgxs_data["Fission Chamber"]["chi-delayed"] = chi_delayed

# Guide Tube
transport = np.array(
    [
        1.26032e-01,
        2.93160e-01,
        2.84240e-01,
        2.80960e-01,
        3.34440e-01,
        5.65640e-01,
        1.17215e00,
    ]
)
absorption = np.array(
    [
        5.11320e-04,
        7.58010e-05,
        3.15720e-04,
        1.15820e-03,
        3.39750e-03,
        9.18780e-03,
        2.32420e-02,
    ]
)
capture = np.array(
    [
        5.11320e-04,
        7.58010e-05,
        3.15720e-04,
        1.15820e-03,
        3.39750e-03,
        9.18780e-03,
        2.32420e-02,
    ]
)
velocity = np.array(
    [2.21473e09, 4.54712e08, 4.22099e07, 5.36964e06, 1.71422e06, 7.63783e05, 2.93629e05]
)
scatter = np.array(
    [
        [
            [
                6.61659e-02,
                5.90700e-02,
                2.83340e-04,
                1.46220e-06,
                2.06420e-08,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                2.40377e-01,
                5.24350e-02,
                2.49900e-04,
                1.92390e-05,
                2.98750e-06,
                4.21400e-07,
            ],
            [
                0.00000e00,
                0.00000e00,
                1.83297e-01,
                9.23970e-02,
                6.94460e-03,
                1.08030e-03,
                2.05670e-04,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                7.88511e-02,
                1.70140e-01,
                2.58810e-02,
                4.92970e-03,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                3.73330e-05,
                9.97372e-02,
                2.06790e-01,
                2.44780e-02,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                9.17260e-04,
                3.16765e-01,
                2.38770e-01,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                4.97920e-02,
                1.09912e00,
            ],
        ]
    ]
)

mgxs_data["Guide Tube"] = {}
mgxs_data["Guide Tube"]["order"] = 0
mgxs_data["Guide Tube"]["transport"] = transport
mgxs_data["Guide Tube"]["absorption"] = absorption
mgxs_data["Guide Tube"]["capture"] = capture
mgxs_data["Guide Tube"]["inverse-velocity"] = 1.0 / velocity
mgxs_data["Guide Tube"]["scatter-matrix"] = scatter

# Moderator
transport = np.array(
    [
        1.59206e-01,
        4.12970e-01,
        5.90310e-01,
        5.84350e-01,
        7.18000e-01,
        1.25445e00,
        2.65038e00,
    ]
)
absorption = np.array(
    [
        6.01050e-04,
        1.57930e-05,
        3.37160e-04,
        1.94060e-03,
        5.74160e-03,
        1.50010e-02,
        3.72390e-02,
    ]
)
capture = np.array(
    [
        6.01050e-04,
        1.57930e-05,
        3.37160e-04,
        1.94060e-03,
        5.74160e-03,
        1.50010e-02,
        3.72390e-02,
    ]
)
velocity = np.array(
    [2.23517e09, 4.98880e08, 3.84974e07, 5.12639e06, 1.67542e06, 7.26031e05, 2.81629e05]
)
scatter = np.array(
    [
        [
            [
                4.44777e-02,
                1.13400e-01,
                7.23470e-04,
                3.74990e-06,
                5.31840e-08,
                0.00000e00,
                0.00000e00,
            ],
            [
                0.00000e00,
                2.82334e-01,
                1.29940e-01,
                6.23400e-04,
                4.80020e-05,
                7.44860e-06,
                1.04550e-06,
            ],
            [
                0.00000e00,
                0.00000e00,
                3.45256e-01,
                2.24570e-01,
                1.69990e-02,
                2.64430e-03,
                5.03440e-04,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                9.10284e-02,
                4.15510e-01,
                6.37320e-02,
                1.21390e-02,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                7.14370e-05,
                1.39138e-01,
                5.11820e-01,
                6.12290e-02,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                2.21570e-03,
                6.99913e-01,
                5.37320e-01,
            ],
            [
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                0.00000e00,
                1.32440e-01,
                2.48070e00,
            ],
        ]
    ]
)

mgxs_data["Moderator"] = {}
mgxs_data["Moderator"]["order"] = 0
mgxs_data["Moderator"]["transport"] = transport
mgxs_data["Moderator"]["absorption"] = absorption
mgxs_data["Moderator"]["capture"] = capture
mgxs_data["Moderator"]["inverse-velocity"] = 1.0 / velocity
mgxs_data["Moderator"]["scatter-matrix"] = scatter

# Control Rod
transport = np.array(
    [
        2.16768e-01,
        4.80098e-01,
        8.86369e-01,
        9.70009e-01,
        9.10482e-01,
        1.13775e00,
        1.84048e00,
    ]
)
absorption = np.array(
    [
        1.70490e-03,
        8.36224e-03,
        8.37901e-02,
        3.97797e-01,
        6.98763e-01,
        9.29508e-01,
        1.17836e00,
    ]
)
capture = np.array(
    [
        1.70490e-03,
        8.36224e-03,
        8.37901e-02,
        3.97797e-01,
        6.98763e-01,
        9.29508e-01,
        1.17836e00,
    ]
)
velocity = np.array(
    [2.18553e09, 4.21522e08, 8.76487e07, 7.47375e06, 2.28533e06, 1.01738e06, 4.11374e05]
)
scatter = np.array(
    [
        [
            [
                1.7056e-01,
                4.4401e-02,
                9.8367e-05,
                1.2779e-07,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                0.0000e00,
                4.7105e-01,
                6.8548e-04,
                3.9140e-10,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                0.0000e00,
                0.0000e00,
                8.0186e-01,
                7.2013e-04,
                0.0000e00,
                0.0000e00,
                0.0000e00,
            ],
            [
                0.0000e00,
                0.0000e00,
                0.0000e00,
                5.7075e-01,
                1.4602e-03,
                0.0000e00,
                0.0000e00,
            ],
            [
                0.0000e00,
                0.0000e00,
                0.0000e00,
                6.5556e-05,
                2.0784e-01,
                3.8149e-03,
                3.6976e-09,
            ],
            [
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                1.0243e-03,
                2.0247e-01,
                4.7529e-03,
            ],
            [
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                0.0000e00,
                3.5304e-03,
                6.5860e-01,
            ],
        ]
    ]
)

mgxs_data["Control Rod"] = {}
mgxs_data["Control Rod"]["order"] = 0
mgxs_data["Control Rod"]["transport"] = transport
mgxs_data["Control Rod"]["absorption"] = absorption
mgxs_data["Control Rod"]["capture"] = capture
mgxs_data["Control Rod"]["inverse-velocity"] = 1.0 / velocity
mgxs_data["Control Rod"]["scatter-matrix"] = scatter
