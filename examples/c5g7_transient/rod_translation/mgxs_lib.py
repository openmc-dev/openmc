#coding=utf-8

import openmc
import numpy as np

###############################################################################
#                 Create a dictionary with the xs data
###############################################################################

mgxs_data = {}

# Instantiate the energy group data
mgxs_data['group_edges'] = [0.0, 0.13, 0.63, 4.1, 55.6, 9.2e3, 1.36e6, 1.0e7]
mgxs_data['num_delayed_groups'] = 8

# UO2
transport      = np.array([1.77949E-01, 3.29805E-01, 4.80388E-01, 5.54367E-01, 3.11801E-01, 3.95168E-01, 5.64406E-01])
absorption     = np.array([8.02480E-03, 3.71740E-03, 2.67690E-02, 9.62360E-02, 3.00200E-02, 1.11260E-01, 2.82780E-01])
capture        = np.array([8.12740E-04, 2.89810E-03, 2.03158E-02, 7.76712E-02, 1.22116E-02, 2.82252E-02, 6.67760E-02])
velocity       = np.array([2.23466E+09, 5.07347E+08, 3.86595E+07, 5.13931E+06, 1.67734E+06, 7.28603E+05, 2.92902E+05])
fission        = np.array([7.21206E-03, 8.19301E-04, 6.45320E-03, 1.85648E-02, 1.78084E-02, 8.30348E-02, 2.16004E-01])
nu             = np.array([2.78145E+00, 2.47443E+00, 2.43383E+00, 2.43380E+00, 2.43380E+00, 2.43380E+00, 2.43380E+00])
nu_fission     = nu * fission
chi            = np.array([5.87910E-01, 4.11760E-01, 3.39060E-04, 1.17610E-07, 0.00000E+00, 0.00000E+00, 0.00000E+00])
beta           = np.array([2.13333E-04, 1.04514E-03, 6.03969E-04, 1.33963E-03, 2.29386E-03, 7.05174E-04, 6.00381E-04, 2.07736E-04])
decay_constant = np.array([1.247E-02, 2.829E-02, 4.252E-02, 1.330E-01, 2.925E-01, 6.665E-01, 1.635E+00, 3.555E+00])
chi_delayed    = np.array([[0.00075, 0.98512, 0.01413, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.03049, 0.96907, 0.00044, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.00457, 0.97401, 0.02142, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.02002, 0.97271, 0.00727, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.05601, 0.93818, 0.00581, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.06098, 0.93444, 0.00458, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.10635, 0.88298, 0.01067, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.09346, 0.90260, 0.00394, 0.00000, 0.00000, 0.00000, 0.00000]])
scatter        = np.array([[[1.27537E-01, 4.23780E-02, 9.43740E-06, 5.51630E-09, 0.00000E+00, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 3.24456E-01, 1.63140E-03, 3.14270E-09, 0.00000E+00, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 0.00000E+00, 4.50940E-01, 2.67920E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 4.52565E-01, 5.56640E-03, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 1.25250E-04, 2.71401E-01, 1.02550E-02, 1.00210E-08],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 1.29680E-03, 2.65802E-01, 1.68090E-02],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 8.54580E-03, 2.73080E-01]]])

mgxs_data['UO2'] = {}
mgxs_data['UO2']['order'] = 0
mgxs_data['UO2']['transport'] = transport
mgxs_data['UO2']['absorption'] = absorption
mgxs_data['UO2']['capture'] = capture
mgxs_data['UO2']['inverse-velocity'] = 1.0 / velocity
mgxs_data['UO2']['scatter-matrix'] = scatter
mgxs_data['UO2']['fission'] = fission
mgxs_data['UO2']['nu-fission'] = nu_fission
mgxs_data['UO2']['chi'] = chi
mgxs_data['UO2']['beta'] = beta
mgxs_data['UO2']['decay-rate'] = decay_constant
mgxs_data['UO2']['chi-delayed'] = chi_delayed

# MOX 4.3%
transport      = np.array([1.78731E-01, 3.30849E-01, 4.83772E-01, 5.66922E-01, 4.26227E-01, 6.78997E-01, 6.82852E-01])
absorption     = np.array([8.43390E-03, 3.75770E-03, 2.79700E-02, 1.04210E-01, 1.39940E-01, 4.09180E-01, 4.09350E-01])
capture        = np.array([8.06860E-04, 2.88080E-03, 2.22717E-02, 8.13228E-02, 1.29177E-01, 1.76423E-01, 1.60382E-01])
velocity       = np.array([2.23473E+09, 5.07114E+08, 3.88385E+07, 5.16295E+06, 1.75719E+06, 7.68973E+05, 2.94764E+05])
fission        = np.array([7.62704E-03, 8.76898E-04, 5.69835E-03, 2.28872E-02, 1.07635E-02, 2.32757E-01, 2.48968E-01])
nu             = np.array([2.85209E+00, 2.89099E+00, 2.85486E+00, 2.86073E+00, 2.85447E+00, 2.86415E+00, 2.86780E+00])
nu_fission     = nu * fission
chi            = np.array([5.87910E-01, 4.11760E-01, 3.39060E-04, 1.17610E-07, 0.00000E+00, 0.00000E+00, 0.00000E+00])
beta           = np.array([7.82484E-05, 6.40534E-04, 2.27884E-04, 5.78624E-04, 9.97539E-04, 4.33265E-04, 3.22355E-04, 1.23882E-04])
decay_constant = np.array([1.247E-02, 2.829E-02, 4.252E-02, 1.330E-01, 2.925E-01, 6.665E-01, 1.635E+00, 3.555E+00])
chi_delayed    = np.array([[0.00075, 0.98512, 0.01413, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.03069, 0.96887, 0.00044, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.00607, 0.97276, 0.02117, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.01887, 0.97282, 0.00831, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.04990, 0.94419, 0.00591, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.05524, 0.93984, 0.00492, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.10140, 0.88508, 0.01351, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.08055, 0.91408, 0.00537, 0.00000, 0.00000, 0.00000, 0.00000]])
scatter        = np.array([[[1.28876E-01, 4.14130E-02, 8.22900E-06, 5.04050E-09, 0.00000E+00, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 3.25452E-01, 1.63950E-03, 1.59820E-09, 0.00000E+00, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 0.00000E+00, 4.53188E-01, 2.61420E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 4.57173E-01, 5.53940E-03, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 1.60460E-04, 2.76814E-01, 9.31270E-03, 9.16560E-09],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 2.00510E-03, 2.52962E-01, 1.48500E-02],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 8.49480E-03, 2.65007E-01]]])

mgxs_data['MOX 4.3%'] = {}
mgxs_data['MOX 4.3%']['order'] = 0
mgxs_data['MOX 4.3%']['transport'] = transport
mgxs_data['MOX 4.3%']['absorption'] = absorption
mgxs_data['MOX 4.3%']['capture'] = capture
mgxs_data['MOX 4.3%']['inverse-velocity'] = 1.0 / velocity
mgxs_data['MOX 4.3%']['scatter-matrix'] = scatter
mgxs_data['MOX 4.3%']['fission'] = fission
mgxs_data['MOX 4.3%']['nu-fission'] = nu_fission
mgxs_data['MOX 4.3%']['chi'] = chi
mgxs_data['MOX 4.3%']['beta'] = beta
mgxs_data['MOX 4.3%']['decay-rate'] = decay_constant
mgxs_data['MOX 4.3%']['chi-delayed'] = chi_delayed

# MOX 7.0%
transport      = np.array([1.81323E-01, 3.34368E-01, 4.93785E-01, 5.91216E-01, 4.74198E-01, 8.33601E-01, 8.53603E-01])
absorption     = np.array([9.06570E-03, 4.29670E-03, 3.28810E-02, 1.22030E-01, 1.82980E-01, 5.68460E-01, 5.85210E-01])
capture        = np.array([8.11240E-04, 2.97105E-03, 2.44594E-02, 8.91570E-02, 1.67016E-01, 2.44666E-01, 2.22407E-01])
velocity       = np.array([2.23479E+09, 5.07355E+08, 3.91436E+07, 5.18647E+06, 1.78072E+06, 7.84470E+05, 3.02310E+05])
fission        = np.array([8.25446E-03, 1.32565E-03, 8.42156E-03, 3.28730E-02, 1.59636E-02, 3.23794E-01, 3.62803E-01])
nu             = np.array([2.88498E+00, 2.91079E+00, 2.86574E+00, 2.87063E+00, 2.86714E+00, 2.86658E+00, 2.87539E+00])
nu_fission     = nu * fission
chi            = np.array([5.87910E-01, 4.11760E-01, 3.39060E-04, 1.17610E-07, 0.00000E+00, 0.00000E+00, 0.00000E+00])
beta           = np.array([7.65120E-05, 6.34833E-04, 2.23483E-04, 5.68882E-04, 9.81163E-04, 4.29227E-04, 3.18971E-04, 1.21830E-04])
decay_constant = np.array([1.247E-02, 2.829E-02, 4.252E-02, 1.330E-01, 2.925E-01, 6.665E-01, 1.635E+00, 3.555E+00])
chi_delayed    = np.array([[0.00075, 0.98512, 0.01413, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.03069, 0.96887, 0.00044, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.00612, 0.97272, 0.02116, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.01883, 0.97283, 0.00834, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.04968, 0.94440, 0.00592, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.05506, 0.94002, 0.00492, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.10115, 0.88527, 0.01358, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.08021, 0.91438, 0.00541, 0.00000, 0.00000, 0.00000, 0.00000]])
scatter        = np.array([[[1.30457E-01, 4.17920E-02, 8.51050E-06, 5.13290E-09, 0.00000E+00, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 3.28428E-01, 1.64360E-03, 2.20170E-09, 0.00000E+00, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 0.00000E+00, 4.58371E-01, 2.53310E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 4.63709E-01, 5.47660E-03, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 1.76190E-04, 2.82313E-01, 8.72890E-03, 9.00160E-09],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 2.27600E-03, 2.49751E-01, 1.31140E-02],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 8.86450E-03, 2.59529E-01]]])

mgxs_data['MOX 7.0%'] = {}
mgxs_data['MOX 7.0%']['order'] = 0
mgxs_data['MOX 7.0%']['transport'] = transport
mgxs_data['MOX 7.0%']['absorption'] = absorption
mgxs_data['MOX 7.0%']['capture'] = capture
mgxs_data['MOX 7.0%']['inverse-velocity'] = 1.0 / velocity
mgxs_data['MOX 7.0%']['scatter-matrix'] = scatter
mgxs_data['MOX 7.0%']['fission'] = fission
mgxs_data['MOX 7.0%']['nu-fission'] = nu_fission
mgxs_data['MOX 7.0%']['chi'] = chi
mgxs_data['MOX 7.0%']['beta'] = beta
mgxs_data['MOX 7.0%']['decay-rate'] = decay_constant
mgxs_data['MOX 7.0%']['chi-delayed'] = chi_delayed

# MOX 8.7%
transport      = np.array([1.83045E-01, 3.36705E-01, 5.00507E-01, 6.06174E-01, 5.02754E-01, 9.21028E-01, 9.55231E-01])
absorption     = np.array([9.48620E-03, 4.65560E-03, 3.62400E-02, 1.32720E-01, 2.08400E-01, 6.58700E-01, 6.90170E-01])
capture        = np.array([8.14110E-04, 3.03134E-03, 2.59684E-02, 9.36753E-02, 1.89142E-01, 2.83812E-01, 2.59571E-01])
velocity       = np.array([2.23483E+09, 5.07520E+08, 3.93259E+07, 5.20109E+06, 1.79321E+06, 7.91377E+05, 3.05435E+05])
fission        = np.array([8.67209E-03, 1.62426E-03, 1.02716E-02, 3.90447E-02, 1.92576E-02, 3.74888E-01, 4.30599E-01])
nu             = np.array([2.90426E+00, 2.91795E+00, 2.86986E+00, 2.87491E+00, 2.87175E+00, 2.86752E+00, 2.87808E+00])
nu_fission     = nu * fission
chi            = np.array([5.87910E-01, 4.11760E-01, 3.39060E-04, 1.17610E-07, 0.00000E+00, 0.00000E+00, 0.00000E+00])
beta           = np.array([7.58799E-05, 6.33750E-04, 2.22271E-04, 5.66810E-04, 9.77854E-04, 4.29965E-04, 3.19265E-04, 1.21188E-04])
decay_constant = np.array([1.247E-02, 2.829E-02, 4.252E-02, 1.330E-01, 2.925E-01, 6.665E-01, 1.635E+00, 3.555E+00])
chi_delayed    = np.array([[0.00075, 0.98512, 0.01413, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.03069, 0.96887, 0.00044, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.00614, 0.97270, 0.02116, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.01880, 0.97284, 0.00836, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.04960, 0.94448, 0.00592, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.05496, 0.94012, 0.00492, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.10101, 0.88540, 0.01359, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.08003, 0.91454, 0.00543, 0.00000, 0.00000, 0.00000, 0.00000]])
scatter        = np.array([[[1.31504E-01, 4.20460E-02, 8.69720E-06, 5.19380E-09, 0.00000E+00, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 3.30403E-01, 1.64630E-03, 2.60060E-09, 0.00000E+00, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 0.00000E+00, 4.61792E-01, 2.47490E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 4.68021E-01, 5.43300E-03, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 1.85970E-04, 2.85771E-01, 8.39730E-03, 8.92800E-09],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 2.39160E-03, 2.47614E-01, 1.23220E-02],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 8.96810E-03, 2.56093E-01]]])

mgxs_data['MOX 8.7%'] = {}
mgxs_data['MOX 8.7%']['order'] = 0
mgxs_data['MOX 8.7%']['transport'] = transport
mgxs_data['MOX 8.7%']['absorption'] = absorption
mgxs_data['MOX 8.7%']['capture'] = capture
mgxs_data['MOX 8.7%']['inverse-velocity'] = 1.0 / velocity
mgxs_data['MOX 8.7%']['scatter-matrix'] = scatter
mgxs_data['MOX 8.7%']['fission'] = fission
mgxs_data['MOX 8.7%']['nu-fission'] = nu_fission
mgxs_data['MOX 8.7%']['chi'] = chi
mgxs_data['MOX 8.7%']['beta'] = beta
mgxs_data['MOX 8.7%']['decay-rate'] = decay_constant
mgxs_data['MOX 8.7%']['chi-delayed'] = chi_delayed

# Fission Chamber
transport      = np.array([1.26032E-01, 2.93160E-01, 2.84250E-01, 2.81020E-01, 3.34460E-01, 5.65640E-01, 1.17214E+00])
absorption     = np.array([5.11320E-04, 7.58130E-05, 3.16430E-04, 1.16750E-03, 3.39770E-03, 9.18860E-03, 2.32440E-02])
capture        = np.array([5.11315E-04, 7.58072E-05, 3.15966E-04, 1.16226E-03, 3.39755E-03, 9.18789E-03, 2.32419E-02])
velocity       = np.array([2.24885E+09, 5.12300E+08, 3.75477E+07, 5.02783E+06, 1.66563E+06, 6.70396E+05, 2.51392E+05])
fission        = np.array([4.79002E-09, 5.82564E-09, 4.63719E-07, 5.24406E-06, 1.45390E-07, 7.14972E-07, 2.08041E-06])
nu             = np.array([2.76283E+00, 2.46239E+00, 2.43383E+00, 2.43380E+00, 2.43380E+00, 2.43380E+00, 2.43380E+00])
nu_fission     = nu * fission
chi            = np.array([5.87910E-01, 4.11760E-01, 3.39060E-04, 1.17610E-07, 0.00000E+00, 0.00000E+00, 0.00000E+00])
beta           = np.array([2.13333E-04, 1.04514E-03, 6.03969E-04, 1.33963E-03, 2.29386E-03, 7.05174E-04, 6.00381E-04, 2.07736E-04])
decay_constant = np.array([1.247E-02, 2.829E-02, 4.252E-02, 1.330E-01, 2.925E-01, 6.665E-01, 1.635E+00, 3.555E+00])
chi_delayed    = np.array([[0.00075, 0.98512, 0.01413, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.03049, 0.96907, 0.00044, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.00457, 0.97401, 0.02142, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.02002, 0.97271, 0.00727, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.05601, 0.93818, 0.00581, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.06098, 0.93444, 0.00458, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.10635, 0.88298, 0.01067, 0.00000, 0.00000, 0.00000, 0.00000],
                           [0.09346, 0.90260, 0.00394, 0.00000, 0.00000, 0.00000, 0.00000]])
scatter        = np.array([[[6.61659E-02, 5.90700E-02, 2.83340E-04, 1.46220E-06, 2.06420E-08, 0.00000E+00, 0.00000E+00],
                            [0.00000E+00, 2.40377E-01, 5.24350E-02, 2.49900E-04, 1.92390E-05, 2.98750E-06, 4.21400E-07],
                            [0.00000E+00, 0.00000E+00, 1.83425E-01, 9.22880E-02, 6.93650E-03, 1.07900E-03, 2.05430E-04],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 7.90769E-02, 1.69990E-01, 2.58600E-02, 4.92560E-03],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 3.73400E-05, 9.97570E-02, 2.06790E-01, 2.44780E-02],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 9.17420E-04, 3.16774E-01, 2.38760E-01],
                            [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 4.97930E-02, 1.09910E+00]]])

mgxs_data['Fission Chamber'] = {}
mgxs_data['Fission Chamber']['order'] = 0
mgxs_data['Fission Chamber']['transport'] = transport
mgxs_data['Fission Chamber']['absorption'] = absorption
mgxs_data['Fission Chamber']['capture'] = capture
mgxs_data['Fission Chamber']['inverse-velocity'] = 1.0 / velocity
mgxs_data['Fission Chamber']['scatter-matrix'] = scatter
mgxs_data['Fission Chamber']['fission'] = fission
mgxs_data['Fission Chamber']['nu-fission'] = nu_fission
mgxs_data['Fission Chamber']['chi'] = chi
mgxs_data['Fission Chamber']['beta'] = beta
mgxs_data['Fission Chamber']['decay-rate'] = decay_constant
mgxs_data['Fission Chamber']['chi-delayed'] = chi_delayed

# Guide Tube
transport  = np.array([1.26032E-01, 2.93160E-01, 2.84240E-01, 2.80960E-01, 3.34440E-01, 5.65640E-01, 1.17215E+00])
absorption = np.array([5.11320E-04, 7.58010E-05, 3.15720E-04, 1.15820E-03, 3.39750E-03, 9.18780E-03, 2.32420E-02])
capture    = np.array([5.11320E-04, 7.58010E-05, 3.15720E-04, 1.15820E-03, 3.39750E-03, 9.18780E-03, 2.32420E-02])
velocity   = np.array([2.21473E+09, 4.54712E+08, 4.22099E+07, 5.36964E+06, 1.71422E+06, 7.63783E+05, 2.93629E+05])
scatter    = np.array([[[6.61659E-02, 5.90700E-02, 2.83340E-04, 1.46220E-06, 2.06420E-08, 0.00000E+00, 0.00000E+00],
                        [0.00000E+00, 2.40377E-01, 5.24350E-02, 2.49900E-04, 1.92390E-05, 2.98750E-06, 4.21400E-07],
                        [0.00000E+00, 0.00000E+00, 1.83297E-01, 9.23970E-02, 6.94460E-03, 1.08030E-03, 2.05670E-04],
                        [0.00000E+00, 0.00000E+00, 0.00000E+00, 7.88511E-02, 1.70140E-01, 2.58810E-02, 4.92970E-03],
                        [0.00000E+00, 0.00000E+00, 0.00000E+00, 3.73330E-05, 9.97372E-02, 2.06790E-01, 2.44780E-02],
                        [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 9.17260E-04, 3.16765E-01, 2.38770E-01],
                        [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 4.97920E-02, 1.09912E+00]]])

mgxs_data['Guide Tube'] = {}
mgxs_data['Guide Tube']['order'] = 0
mgxs_data['Guide Tube']['transport'] = transport
mgxs_data['Guide Tube']['absorption'] = absorption
mgxs_data['Guide Tube']['capture'] = capture
mgxs_data['Guide Tube']['inverse-velocity'] = 1.0 / velocity
mgxs_data['Guide Tube']['scatter-matrix'] = scatter

# Moderator
transport  = np.array([1.59206E-01, 4.12970E-01, 5.90310E-01, 5.84350E-01, 7.18000E-01, 1.25445E+00, 2.65038E+00])
absorption = np.array([6.01050E-04, 1.57930E-05, 3.37160E-04, 1.94060E-03, 5.74160E-03, 1.50010E-02, 3.72390E-02])
capture    = np.array([6.01050E-04, 1.57930E-05, 3.37160E-04, 1.94060E-03, 5.74160E-03, 1.50010E-02, 3.72390E-02])
velocity   = np.array([2.23517E+09, 4.98880E+08, 3.84974E+07, 5.12639E+06, 1.67542E+06, 7.26031E+05, 2.81629E+05])
scatter    = np.array([[[4.44777E-02, 1.13400E-01, 7.23470E-04, 3.74990E-06, 5.31840E-08, 0.00000E+00, 0.00000E+00],
                        [0.00000E+00, 2.82334E-01, 1.29940E-01, 6.23400E-04, 4.80020E-05, 7.44860E-06, 1.04550E-06],
                        [0.00000E+00, 0.00000E+00, 3.45256E-01, 2.24570E-01, 1.69990E-02, 2.64430E-03, 5.03440E-04],
                        [0.00000E+00, 0.00000E+00, 0.00000E+00, 9.10284E-02, 4.15510E-01, 6.37320E-02, 1.21390E-02],
                        [0.00000E+00, 0.00000E+00, 0.00000E+00, 7.14370E-05, 1.39138E-01, 5.11820E-01, 6.12290E-02],
                        [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 2.21570E-03, 6.99913E-01, 5.37320E-01],
                        [0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 1.32440E-01, 2.48070E+00]]])

mgxs_data['Moderator'] = {}
mgxs_data['Moderator']['order'] = 0
mgxs_data['Moderator']['transport'] = transport
mgxs_data['Moderator']['absorption'] = absorption
mgxs_data['Moderator']['capture'] = capture
mgxs_data['Moderator']['inverse-velocity'] = 1.0 / velocity
mgxs_data['Moderator']['scatter-matrix'] = scatter

# Control Rod
transport  = np.array([2.16768E-01, 4.80098E-01, 8.86369E-01, 9.70009E-01, 9.10482E-01, 1.13775E+00, 1.84048E+00])
absorption = np.array([1.70490E-03, 8.36224E-03, 8.37901E-02, 3.97797E-01, 6.98763E-01, 9.29508E-01, 1.17836E+00])
capture    = np.array([1.70490E-03, 8.36224E-03, 8.37901E-02, 3.97797E-01, 6.98763E-01, 9.29508E-01, 1.17836E+00])
velocity   = np.array([2.18553E+09, 4.21522E+08, 8.76487E+07, 7.47375E+06, 2.28533E+06, 1.01738E+06, 4.11374E+05])
scatter    = np.array([[[1.7056E-01, 4.4401E-02, 9.8367E-05, 1.2779E-07, 0.0000E+00, 0.0000E+00, 0.0000E+00],
                        [0.0000E+00, 4.7105E-01, 6.8548E-04, 3.9140E-10, 0.0000E+00, 0.0000E+00, 0.0000E+00],
                        [0.0000E+00, 0.0000E+00, 8.0186E-01, 7.2013E-04, 0.0000E+00, 0.0000E+00, 0.0000E+00],
                        [0.0000E+00, 0.0000E+00, 0.0000E+00, 5.7075E-01, 1.4602E-03, 0.0000E+00, 0.0000E+00],
                        [0.0000E+00, 0.0000E+00, 0.0000E+00, 6.5556E-05, 2.0784E-01, 3.8149E-03, 3.6976E-09],
                        [0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 1.0243E-03, 2.0247E-01, 4.7529E-03],
                        [0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 3.5304E-03, 6.5860E-01]]])

mgxs_data['Control Rod'] = {}
mgxs_data['Control Rod']['order'] = 0
mgxs_data['Control Rod']['transport'] = transport
mgxs_data['Control Rod']['absorption'] = absorption
mgxs_data['Control Rod']['capture'] = capture
mgxs_data['Control Rod']['inverse-velocity'] = 1.0 / velocity
mgxs_data['Control Rod']['scatter-matrix'] = scatter
