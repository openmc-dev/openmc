#!/usr/bin/env python3

"""
Download ENDF/B-VII.1 ENDF data from NNDC for photo-atomic and atomic
relaxation data and convert it to an HDF5 library for use with OpenMC.
This data is used for photon transport in OpenMC.
"""

import argparse
import os
from pathlib import Path
import zipfile

import openmc.data
from openmc._utils import download


class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                      argparse.RawDescriptionHelpFormatter):
    pass


parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=CustomFormatter
)
parser.add_argument('-c', '--cross-sections',
                    help='cross_sections.xml file to append libraries to')
args = parser.parse_args()

base_url = 'https://www.nndc.bnl.gov/endf/b7.1/zips/'
files = ['ENDF-B-VII.1-photoat.zip', 'ENDF-B-VII.1-atomic_relax.zip']
block_size = 16384

# ==============================================================================
# DOWNLOAD FILES FROM NNDC SITE

output = Path('photon_hdf5')
output.mkdir(exist_ok=True)

for f in files:
    download(base_url + f)

# ==============================================================================
# EXTRACT FILES

for f in files:
    print('Extracting {}...'.format(f))
    zipfile.ZipFile(f).extractall()

# ==============================================================================
# GENERATE HDF5 DATA LIBRARY

# If previous cross_sections.xml was specified, load it in
if args.cross_sections is not None:
    lib_path = args.cross_sections
    library = openmc.data.DataLibrary.from_xml(lib_path)
else:
    lib_path = output / 'cross_sections.xml'
    library = openmc.data.DataLibrary()

# Iterate over each natural element from Z=1 to Z=100
for z in range(1, 101):
    element = openmc.data.ATOMIC_SYMBOL[z]
    print('Generating HDF5 file for Z={} ({})...'.format(z, element))

    # Generate instance of IncidentPhoton
    photo_file = os.path.join('photoat', 'photoat-{:03}_{}_000.endf'.format(z, element))
    atom_file = os.path.join('atomic_relax', 'atom-{:03}_{}_000.endf'.format(z, element))
    data = openmc.data.IncidentPhoton.from_endf(photo_file, atom_file)

    # Write HDF5 file and register it
    hdf5_file = output / (element + '.h5')
    data.export_to_hdf5(hdf5_file, 'w')
    library.register_file(hdf5_file)

library.export_to_xml(lib_path)
