#!/usr/bin/env python

import os
import tarfile

import numpy as np
import h5py

from openmc._utils import download


base_url = 'http://geant4.cern.ch/support/source/'
filename = 'G4EMLOW.6.48.tar.gz'

# ==============================================================================
# DOWNLOAD FILES FROM GEANT4 SITE

download(base_url + filename)

# ==============================================================================
# EXTRACT FILES FROM TGZ

if not os.path.isdir('G4EMLOW6.48'):
    with tarfile.open(filename, 'r') as tgz:
        print('Extracting {}...'.format(filename))
        tgz.extractall()

# ==============================================================================
# GENERATE COMPTON PROFILE HDF5 FILE

print('Generating compton_profiles.h5...')

shell_file = os.path.join('G4EMLOW6.48', 'doppler', 'shell-doppler.dat')

with open(shell_file, 'r') as shell, h5py.File('compton_profiles.h5', 'w') as f:
    # Read/write electron momentum values
    pz = np.loadtxt(os.path.join('G4EMLOW6.48', 'doppler', 'p-biggs.dat'))
    f.create_dataset('pz', data=pz)

    for z in range(1, 101):
        # Create group for this element
        group = f.create_group('{:03}'.format(z))

        # Read data into one long array
        path = os.path.join('G4EMLOW6.48', 'doppler', 'profile-{}.dat'.format(z))
        with open(path, 'r') as profile:
            j = np.fromstring(profile.read(), sep=' ')

        # Determine number of electron shells and reshape. Profiles are
        # tabulated against a grid of 31 momentum values.
        n_shells = j.size // 31
        j.shape = (n_shells, 31)

        # Write Compton profile for this Z
        group.create_dataset('J', data=j)

        # Determine binding energies and number of electrons for each shell
        num_electrons = []
        binding_energy = []
        while True:
            words = shell.readline().split()
            if words[0] == '-1':
                break
            num_electrons.append(float(words[0]))
            binding_energy.append(float(words[1]))

        # Write binding energies and number of electrons
        group.create_dataset('num_electrons', data=num_electrons)
        group.create_dataset('binding_energy', data=binding_energy)
