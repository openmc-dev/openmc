#!/usr/bin/env python
"""Convert binary particle track to VTK poly data.

Usage information can be obtained by running 'track.py --help':

    usage: track.py [-h] [-o OUT] IN [IN ...]

    Convert particle track file to a .pvtp file.

    positional arguments:
      IN                 Input particle track data filename(s).

    optional arguments:
      -h, --help         show this help message and exit
      -o OUT, --out OUT  Output VTK poly data filename.

"""

import os
import argparse
import struct
import vtk


def _parse_args():
    # Create argument parser.
    parser = argparse.ArgumentParser(
        description='Convert particle track file to a .pvtp file.')
    parser.add_argument('input', metavar='IN', type=str, nargs='+',
                        help='Input particle track data filename(s).')
    parser.add_argument('-o', '--out', metavar='OUT', type=str, dest='out',
                        help='Output VTK poly data filename.')

    # Parse and return commandline arguments.
    return parser.parse_args()


def main():
    # Parse commandline arguments.
    args = _parse_args()

    # Check input file extensions.
    for fname in args.input:
        if not (fname.endswith('.h5') or fname.endswith('.binary')):
            raise ValueError("Input file names must either end with '.h5' or"
                             "'.binary'.")

    # Make sure that the output filename ends with '.pvtp'.
    if not args.out:
        args.out = 'tracks.pvtp'
    elif not args.out.endswith('.pvtp'):
        args.out += '.pvtp'

    # Import HDF library if HDF files are present
    for fname in args.input:
        if fname.endswith('.h5'):
            import h5py
            break

    # Initialize data arrays and offset.
    points = vtk.vtkPoints()
    cells = vtk.vtkCellArray()
    point_offset = 0
    for fname in args.input:
        # Write coordinate values to points array.
        if fname.endswith('.binary'):
            track = open(fname, 'rb')

            # Determine number of particles and tracks/particle
            n_particles = struct.unpack('i', track.read(4))[0]
            n_coords = struct.unpack('i'*n_particles, track.read(4*n_particles))

            coords = []
            for i in range(n_particles):
                # Read coordinates for each particle
                coords.append([struct.unpack('ddd', track.read(24))
                               for j in range(n_coords[i])])

                # Add coordinates to points data
                for triplet in coords[i]:
                    points.InsertNextPoint(triplet)

        else:
            track = h5py.File(fname)
            n_particles = track['n_particles'].value[0]
            n_coords = track['n_coords']
            coords = []
            for i in range(n_particles):
                coords.append(track['coordinates_' + str(i + 1)].value)
                for j in range(n_coords[i]):
                    points.InsertNextPoint(coords[i][j,:])

        for i in range(n_particles):
            # Create VTK line and assign points to line.
            line = vtk.vtkPolyLine()
            line.GetPointIds().SetNumberOfIds(n_coords[i])
            for j in range(n_coords[i]):
                line.GetPointIds().SetId(j, point_offset + j)

            # Add line to cell array
            cells.InsertNextCell(line)
            point_offset += n_coords[i]

    data = vtk.vtkPolyData()
    data.SetPoints(points)
    data.SetLines(cells)

    writer = vtk.vtkXMLPPolyDataWriter()
    if vtk.vtkVersion.GetVTKMajorVersion() > 5:
        writer.SetInputData(data)
    else:
        writer.SetInput(data)
    writer.SetFileName(args.out)
    writer.Write()


if __name__ == '__main__':
    main()
