element tallies {
  element mesh {
    (element id { xsd:int } | attribute id { xsd:int }) &
    (element type { ( "regular" ) } |
      attribute type { ( "regular" ) }) &
    (element dimension { list { xsd:positiveInteger+ } } |
      attribute dimension { list { xsd:positiveInteger+ } }) &
    (element lower_left { list { xsd:double+ } } |
      attribute lower_left { list { xsd:double+ } }) &
    (
      (element upper_right { list { xsd:double+ } } |
        attribute upper_right { list { xsd:double+ } }) |
      (element width { list { xsd:double+ } } |
        attribute width { list { xsd:double+ } })
    )
  }* &

  element derivative {
    (element id { xsd:int } | attribute id { xsd:int }) &
    (element material { xsd:int } | attribute material { xsd:int }) &
    ( (element variable { ( "density") }
        | attribute variable { ( "density" ) } ) |
      (
        (element variable { ( "nuclide_density" ) }
          | attribute variable { ( "nuclide_density" ) } )
        &
        (element nuclide { xsd:string { maxLength = "12" } }
          | attribute nuclide { xsd:string { maxLength = "12" } } )
      ) |
      (element variable { ( "temperature") }
        | attribute variable { ( "temperature" ) } )
    )
  }* &

  element filter {
    (element id { xsd:int } | attribute id { xsd:int }) &
    (
      ( (element type { ( "cell" | "cellfrom" | "cellborn" | "material" | 
          "universe" | "surface" | "distribcell" | "mesh" | "energy" | 
          "energyout" | "mu" | "polar" | "azimuthal" | "delayedgroup" | 
          "energyfunction") } |
         attribute type { ( "cell" | "cellfrom" | "cellborn" | "material" | 
          "universe" | "surface" | "distribcell" | "mesh" | "energy" | 
          "energyout" | "mu" | "polar" | "azimuthal" | "delayedgroup" | 
          "energyfunction") }) &
        (element bins { list { xsd:double+ } } |
          attribute bins { list { xsd:double+ } })
      ) |
      (
        (element type { ("energyfunction") } |
         attribute type { ("energyfunction") }) &
        (element energy { list { xsd:double+ } } |
          attribute energy { list { xsd:double+ } }) &
        (element y { list { xsd:double+ } } |
          attribute y { list { xsd:double+ } })
      )
    )
  }* &

  element tally {
    (element id { xsd:int } | attribute id { xsd:int }) &
    (element name { xsd:string { maxLength="52" } } |
      attribute name { xsd:string { maxLength="52" } })? &
    (element estimator { ( "analog" | "tracklength" | "collision" ) } |
      attribute estimator { ( "analog" | "tracklength" | "collision" ) })? &
    (element filters { list { xsd:int+ } } |
      attribute filters { list { xsd:int+ } })? &
    element nuclides {
      list { xsd:string { maxLength = "12" }+ }
    }? &
    element scores {
      list { xsd:string { maxLength = "20" }+ }
    } &
    element trigger {
      (element type { xsd:string } | attribute type { xsd:string }) &
      (element threshold { xsd:double} | attribute threshold { xsd:double }) &
      (element scores { list { xsd:string { maxLength = "20" }+ } } | attribute scores { list { xsd:string { maxLength = "20"}+ } } )?
    }* &
    (element derivative { xsd:int } | attribute derivative { xsd:int } )?
  }* &

  element assume_separate { xsd:boolean }?
}
